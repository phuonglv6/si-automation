import datetime
from .base_model import Model
from ..import db

class Doc(Model):
    id= db.Column(db.Integer,primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    dated = db.Column(db.DateTime(), default=datetime.datetime.now)
    bkg_no = db.Column(db.String(255), nullable=True)
    shipper = db.Column(db.String(255), nullable=True)
    consignee = db.Column(db.String(255), nullable=True)
    notify = db.Column(db.String(255), nullable=True)
    also_notify = db.Column(db.String(255), nullable=True)
    vessel = db.Column(db.String(255), nullable=True)
    voyage = db.Column(db.String(255), nullable=True)
    place_of_receipt = db.Column(db.String(255), nullable=True)
    port_of_loading = db.Column(db.String(255), nullable=True)
    port_of_discharge = db.Column(db.String(255), nullable=True)
    place_of_delivery = db.Column(db.String(255), nullable=True)
    final_destination = db.Column(db.String(255), nullable=True)
    total_mark = db.Column(db.String(255), nullable=True)
    total_type = db.Column(db.String(255), nullable=True)
    total_packages = db.Column(db.String(255), nullable=True)
    description_of_goods = db.Column(db.String(255), nullable=True)
    total_weight = db.Column(db.String(255), nullable=True)
    total_measurement = db.Column(db.String(255), nullable=True)
    hs_code = db.Column(db.String(255), nullable=True)
    ams_scac_code = db.Column(db.String(255), nullable=True)
    aci_code = db.Column(db.String(255), nullable=True)
    bl_type = db.Column(db.String(255), nullable=True)
    payment = db.Column(db.String(255), nullable=True)
    containerdetailes = db.relationship('ContainerDetail', backref="doc",lazy=True)
    template = db.Column(db.Integer, db.ForeignKey('annotation.id'),nullable=False)
    def __repr__(self):
        return self.bkg_no if self.bkg_no is not None else 'Empty'

class ContainerDetail(Model):
    id = db.Column(db.Integer(), primary_key=True)
    container_no = db.Column(db.String(255))
    seal_no = db.Column(db.String(255), nullable=True)
    container_type = db.Column(db.String(255), nullable=True)
    packages = db.Column(db.String(255), nullable=True)
    container_mark = db.Column(db.String(255), nullable=True)
    container_weight = db.Column(db.String(255), nullable=True)
    container_cbm = db.Column(db.String(255), nullable=True)
    doc_id = db.Column(db.Integer, db.ForeignKey('doc.id'),nullable=False)
    
    def __repr__(self):
        return "<ContainerNo '{}'>".format(self.container_no)
class Annotation(Model):
    id = db.Column(db.Integer(), primary_key=True)
    bkg_no = db.Column(db.JSON())
    shipper = db.Column(db.JSON())
    consignee = db.Column(db.JSON())
    notify = db.Column(db.JSON())
    vessel = db.Column(db.JSON())
    voyage = db.Column(db.JSON())
    place_of_receipt = db.Column(db.JSON())
    port_of_loading = db.Column(db.JSON())
    port_of_discharge = db.Column(db.JSON())
    place_of_delivery = db.Column(db.JSON())
    total_mark = db.Column(db.JSON())
    total_packages = db.Column(db.JSON())
    description_of_goods = db.Column(db.JSON())
    total_weight = db.Column(db.JSON())
    total_measurement = db.Column(db.JSON())
    hs_code = db.Column(db.JSON())
    ams_scac_code = db.Column(db.JSON())
    aci_code = db.Column(db.JSON())
    bl_type = db.Column(db.JSON())
    payment = db.Column(db.JSON())
    container_no = db.Column(db.JSON())
    seal_no = db.Column(db.JSON())
    container_type = db.Column(db.JSON())
    packages = db.Column(db.JSON())
    container_mark = db.Column(db.JSON())
    container_weight = db.Column(db.JSON())
    container_measurement = db.Column(db.JSON())
    containers_detail = db.Column(db.JSON())
    total_type = db.Column(db.JSON())
    also_notify = db.Column(db.JSON())
    final_destination = db.Column(db.JSON())
    so_number = db.Column(db.JSON())
    package_unit = db.Column(db.JSON())
    weight_unit = db.Column(db.JSON())
    measurement_unit = db.Column(db.JSON())
    cus_name = db.Column(db.JSON())
    cus_tel = db.Column(db.JSON())
    cus_mobile = db.Column(db.JSON())
    cus_fax = db.Column(db.JSON())
    cus_email = db.Column(db.JSON())
    cus_ref_no = db.Column(db.JSON())
    remarks = db.Column(db.JSON())
    rd_terms = db.Column(db.JSON())
    img_original_url = db.Column(db.String(255), nullable=True)
    img_matching_url = db.Column(db.String(255), nullable=True)    
    docs = db.relationship('Doc', backref="annotation",lazy=True)
    def __repr__(self):
        return self.bkg_no if self.bkg_no is not None else 'Empty'
